#!/usr/bin/env python
"""
The purpose of this project is to create a command line utility called 
perflogger to measure the performance of commands and other utilities. 
This module will capture run time environment and performance data from 
outputs of commands that have been run with this module. Information will 
be parsed into a JSON document and inserted into an index in the Elasticsearch 
database using the Python Elasticsearch Client. With the performance data in 
the Elasticsearch database, further exploration and analysis on the data can 
be done on Kibana, which is a data visualization plugin for Elasticsearch.
"""
import elasticsearch
import time
import sys
import argparse
import logging
import subprocess
import os
import platform

from perflogger import Perf


def parseArguments():
    parser = argparse.ArgumentParser(
            usage = 'perflogger [-h] [-d] [-p PROJECT] command [command options] [command args]',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description=__doc__)
    parser.add_argument("command", type=str, nargs="+",
            help="command to run with additional options and arguments")
    parser.add_argument('-d', "--debugging", action='store_true', 
            default=False, help="print detailed debugging information")
    parser.add_argument('-p', "--project", 
            help="the project that the command is being run for")

    return parser.parse_known_args()


def runCommand(command):
    """
    Run the command and get the performance time. 

    Keyword argument:
    -----------------
    command         -- command to be run
    """
    # Run command and get performance data
    start = time.time()
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    end = time.time()
    sys.stdout.write(out)
    sys.stderr.write(err)
    logging.debug("Command: %s; Output: %s; Error: %s", command, out, err)
    return end - start


def getRunEnvi ():
    """
    Get timestamp, Linux version, CPU information, and environment variables. 

    Keyword argument:
    -----------------
    None
    """
    # Get timestamp
    ts = time.ctime() 
    # Get Linux version and CPU info
    proc = platform.processor()
    machine = platform.machine()
    node = platform.node()
    arch = platform.architecture()
    plat = platform.platform()
    sys = platform.system()
    release = platform.release()
    ver = platform.version()
    LinuxCPUInfo = (proc, machine, node, arch, plat, sys, release, ver)
    # Get environment variables
    env = ""
    for envKey in os.environ.keys():
        env += "%s=%s\n" % (envKey, os.environ[envKey])
    logging.debug("Timestamp: %s; LinuxCPUInfo: %s; env: %s", ts, LinuxCPUInfo, env)

    return ts, LinuxCPUInfo, env


def parseToJSON (cmd, argv, project, perfTime, out, err, ts, LinuxCPUInfo, env):
    """
    Parse the data into JSON format and insert into the Elasticsearch 
    Database.

    Keyword argument:
    -----------------
    cmd             -- the input command
    argv            -- the options for command
    project         -- the projec that the command belongs to
    perfTime        -- total time the command took
    out             -- output from the command
    err             -- error message from the command
    ts              -- timestamp
    linuxCPUInfo    -- Linux version
    env             -- environment variables
    """
    print "Parsing to JSON..."
    dataJSON = {}

    """
    Format of JSON:
    ---------------
    json: {
        runenv: {
            nodes, cpu, uname
        }
        args:
        command:
        project:
        user:
        start: timestamp
        end: timestamp
        duration:
        timings: {..., ..., ...}
        success: true/false
    }
    """


def insertToESDB ():
    """
    Create an index (if not exists) and insert the json into it

    Keyword argument:
    -----------------
    json    -- JSON with relevant data
    """
    # Create index

    # Insert into index
    print "Inserting json into Elasticsearch Database..."


def main():
    args, argv = parseArguments()
    if args.debugging:
        logging.basicConfig(level=logging.DEBUG, 
                format='%(asctime)s %(message)s',
                datefmt='%I:%M:%S')
    else:
        logging.basicConfig(format='%(asctime)s %(message)s',
            datefmt='%I:%M:%S')

    perf = Perf()
    cputtyupe = perf.LinuxCPUInfo 

    perfTime = runCommand(args.command +  argv)
    ts, LinuxCPUInfo, env = getRunEnvi()
    parseToJSON(args.command, argv, args.project, perfTime, out, err, ts, 
                LinuxCPUInfo, env)
    insertToESDB()

if __name__ == '__main__':
    main()
